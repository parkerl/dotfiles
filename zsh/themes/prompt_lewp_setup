function prompt_athn_precmd {
  # Check for untracked files or updated submodules since vcs_info does not.
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    local revision=$(git rev-parse --short HEAD)
    pair=$(git config --local user.name)
    branch_format="$pair(${_prompt_athn_colors[1]}%b%{$fg[blue]%}@${_prompt_athn_colors[2]}$revision%f%u%c${_prompt_athn_colors[4]}●%f)"
  else
    git status &> /dev/null
    if [[ $? = 0 ]]; then
      local revision=$(git rev-parse --short HEAD)
      pair=$(git config --local user.name)
      branch_format="$pair(${_prompt_athn_colors[1]}%b%{$fg[blue]%}@${_prompt_athn_colors[2]}$revision%f%u%c)"
    else
      branch_format=""
    fi
  fi

  zstyle ':vcs_info:*:prompt:*' formats "${branch_format}"

  vcs_info 'prompt'

  if (( $+functions[python-info] )); then
    python-info
  fi
}

function prompt_athn_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  # Add hook for calling vcs_info before each command.
  add-zsh-hook precmd prompt_athn_precmd

  # Use extended color pallete if available.
  if [[ $TERM = *256color* || $TERM = *rxvt* ]]; then
    _prompt_athn_colors=(
      "%F{81}"  # Turquoise
      "%F{166}" # Orange
      "%F{135}" # Purple
      "%F{161}" # Hotpink
      "%F{118}" # Limegreen
    )
  else
    _prompt_athn_colors=(
      "%F{cyan}"
      "%F{yellow}"
      "%F{magenta}"
      "%F{red}"
      "%F{green}"
    )
  fi

  # Formats:
  #   %b - branchname
  #   %u - unstagedstr (see below)
  #   %c - stagedstr (see below)
  #   %a - action (e.g. rebase-i)
  #   %R - repository path
  #   %S - path in the repository
  local branch_format="(${_prompt_athn_colors[1]}%b%f%u%c)"
  local action_format="(${_prompt_athn_colors[5]}%a%f)"
  local unstaged_format="${_prompt_athn_colors[2]}●%f"
  local staged_format="${_prompt_athn_colors[5]}●%f"

  # Set vcs_info parameters.
  zstyle ':vcs_info:*' enable bzr git hg svn
  zstyle ':vcs_info:*:prompt:*' check-for-changes true
  zstyle ':vcs_info:*:prompt:*' unstagedstr "${unstaged_format}"
  zstyle ':vcs_info:*:prompt:*' stagedstr "${staged_format}"
  zstyle ':vcs_info:*:prompt:*' actionformats "${branch_format}${action_format}"
  zstyle ':vcs_info:*:prompt:*' formats "${branch_format}"
  zstyle ':vcs_info:*:prompt:*' nvcsformats   ""

  # Set python-info parameters.
  zstyle ':prezto:module:python:info:virtualenv' format '(%v)'

  # Define prompts.
  PROMPT="
${_prompt_athn_colors[5]}%~%f "'${vcs_info_msg_0_}'"
"'$(prompt_char) %{$fg[blue]%}>%{$reset_color%} '""
  RPROMPT=''
}

prompt_athn_setup "$@"

function prompt_char {
    git branch >/dev/null 2>/dev/null && echo '±' && return
    hg root >/dev/null 2>/dev/null && echo '☿' && return
    echo '○'
}

function zle-line-init zle-keymap-select {
    RPS1="${${KEYMAP/vicmd/-N-}/(main|viins)/-I-}%{$fg_bold[red]%}%{$reset_color%}"
    RPS2=$RPS1
    zle reset-prompt
}

#zle-keymap-select () {
#  case $KEYMAP in
#    vicmd) print -rn -- $terminfo[cvvis];; # block cursor
#    viins) print -rn -- $terminfo[cnorm];; # less visible cursor
#  esac
#}

zle -N zle-line-init
zle -N zle-keymap-select
